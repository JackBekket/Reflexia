   
            /*
            fset := token.NewFileSet()
            
            f, err := parser.ParseFile(fset, file, nil, parser.ParseComments)
            if err != nil {
              log.Fatalf("Error parsing file: %s", err)
            }
          
            // This code is commenting functions
            // Inspect the AST and extract function declarations
            
            ast.Inspect(f, func(n ast.Node) bool {
              switch x := n.(type) {
              case *ast.FuncDecl:
                // This is a function declaration
                // Get the function declaration
                start := fset.Position(x.Pos()).Offset
                end := fset.Position(x.End()).Offset
          
                // Read the file content
                content, err := ioutil.ReadFile(file)
                if err != nil {
                  log.Fatalf("Error reading file: %s", err)
                }
          
                // Extract the function declaration
                funcDecl := string(content[start:end])
          
                // Call ai.GenerateCommentForFunction with the function declaration
                comment := ai.GenerateCommentForFunction(funcDecl)
                fmt.Println("Comment:", comment)
                _, err = readme_file.WriteString(fmt.Sprintf("## Comment's for functions \n\n%s\n\n", comment))
                if err != nil  {
                    fmt.Printf("Error writing to .md file for function %s: %s\n", pkg.Name, err)
                }
                pkgs[pkg.Name].Markdowns = append(pkgs[pkg.Name].Markdowns, comment)
              }
              return true
            })
            // end walking through functions
            */